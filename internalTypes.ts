/**
 * @module
 *
 * Internal types shared between the Glue runtime and the CLI/backend.
 *
 * This module contains the core type definitions used for event registration,
 * trigger configuration, and account injection throughout the Glue system.
 * These types ensure consistency between the runtime library and the backend
 * services that process and execute the registered triggers. These types should
 * not be needed by users creating Glues, its only for internal (to Glue) use.
 * @internal
 */

import { z } from "zod";

/**
 * Represents an event that can trigger a registered handler.
 *
 * This is the base structure for all events that flow through the Glue runtime,
 * regardless of the specific event source (GitHub, Stripe, webhook, etc.).
 * @internal
 */
export interface TriggerEvent {
  /** The event source type (e.g., "github", "stripe", "webhook") */
  type: string;
  /** The unique label identifying the specific trigger registration.
   * Typically these are auto-generated by Glue to be incrementing numbers
   * but users can override them. */
  label: string;
  /** The event-specific data payload, structure varies by event type. */
  data?: unknown;
}

/** Zod schema for validating TriggerEvent objects */
export const TriggerEvent: z.ZodType<TriggerEvent> = z.object({
  type: z.string(),
  label: z.string(),
  data: z.unknown(),
});

/**
 * Represents a trigger registration in the Glue system.
 *
 * This structure is used to communicate registered triggers from the runtime
 * to the backend, including all necessary configuration for the backend to
 * set up the appropriate webhooks or event listeners.
 *
 * @example
 * ```typescript
 * const registration: TriggerRegistration = {
 *   type: "github",
 *   label: "pr-reviewer",
 *   config: {
 *     owner: "octocat",
 *     repo: "hello-world",
 *     events: ["pull_request"],
 *     username: "bot-user"
 *   }
 * };
 * ```
 * @internal
 */
export interface TriggerRegistration {
  /** The event source type this trigger is registered for */
  type: string;
  /** A unique label to identify this specific trigger */
  label: string;
  /** Event source specific configuration (varies by type) */
  config?: unknown;
}

/** Zod schema for validating TriggerRegistration objects */
export const TriggerRegistration: z.ZodType<TriggerRegistration> = z.object({
  type: z.string(),
  label: z.string(),
  config: z.object({}).passthrough().optional(),
});

/**
 * Represents an account injection registration.
 *
 * Account injections allow users to configure authentication credentials
 * and connection details for external services that triggers will use.
 * This enables triggers to act on behalf of specific accounts when
 * interacting with external APIs.
 *
 * @example
 * ```typescript
 * const accountInjection: AccountInjectionRegistration = {
 *   type: "github",
 *   label: "main-github-account",
 *   config: {
 *     token: "ghp_xxxxxxxxxxxx",
 *     username: "octocat"
 *   }
 * };
 * ```
 * @internal
 */
export interface AccountInjectionRegistration {
  /** The service type this account is for (e.g., "github", "stripe") */
  type: string;
  /** A unique label to identify this specific account injection */
  label: string;
  /** Service-specific account configuration (varies by type) */
  config?: unknown;
}

/** Zod schema for validating AccountInjectionRegistration objects */
export const AccountInjectionRegistration: z.ZodType<AccountInjectionRegistration> = z
  .object({
    type: z.string(),
    label: z.string(),
    config: z.object({}).passthrough().optional(),
  });

/**
 * Container for all registrations in a Glue application.
 *
 * This structure holds all triggers and account injections registered
 * by a Glue application, and is used to communicate the complete
 * configuration from the runtime to the backend.
 *
 * @example
 * ```typescript
 * const registrations: Registrations = {
 *   triggers: [
 *     { type: "github", label: "pr-handler", config: {...} },
 *     { type: "cron", label: "daily-backup", config: {...} }
 *   ],
 *   accountInjections: [
 *     { type: "github", label: "bot-account", config: {...} }
 *   ]
 * };
 * ```
 * @internal
 */
export interface Registrations {
  /** All event trigger registrations in the application */
  triggers: TriggerRegistration[];
  /** All account injection registrations in the application */
  accountInjections: AccountInjectionRegistration[];
}

/** Zod schema for validating Registrations objects */
export const Registrations: z.ZodType<Registrations> = z.object({
  triggers: z.array(TriggerRegistration),
  accountInjections: z.array(AccountInjectionRegistration),
  // TODO secretInjections
});

/**
 * GitHub event source configuration.
 * Can be either repository-specific or organization-wide.
 * @see {@link GithubRepoConfig} for repository configuration
 * @see {@link GithubOrgConfig} for organization configuration
 * @internal
 */
export type { GithubConfig } from "./integrations/eventSources/github/runtime.ts";

/**
 * Gmail event source configuration.
 * Specifies which Gmail account to monitor for new messages.
 * @internal
 */
export type { GmailConfig } from "./integrations/eventSources/gmail/runtime.ts";

/**
 * Webhook event source configuration.
 * Specifies HTTP method filtering for webhook endpoints.
 * @internal
 */
export type { WebhookConfig } from "./integrations/eventSources/webhook/runtime.ts";

/**
 * Cron event source configuration.
 * Contains the cron expression for scheduled triggers.
 * @internal
 */
export type { CronConfig } from "./integrations/eventSources/cron/runtime.ts";

/**
 * Streak CRM event source configuration.
 * Specifies which pipeline and events to monitor.
 * @internal
 */
export type { StreakConfig } from "./integrations/eventSources/streak/runtime.ts";

/**
 * Stripe event source configuration.
 * Specifies which Stripe webhook events to listen for.
 * @internal
 */
export type { StripeConfig } from "./integrations/eventSources/stripe/runtime.ts";

/**
 * Intercom event source configuration.
 * Specifies which Intercom workspace and events to monitor.
 * @internal
 */
export type { IntercomConfig } from "./integrations/eventSources/intercom/runtime.ts";
